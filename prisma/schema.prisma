// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  EDITOR
  VIEWER
}

model User {
  id         String       @id @default(uuid())
  name       String
  lastname   String
  email      String       @unique
  password   String
  sex        String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  Profile    Profile[]
  Album      Album[]
  Video      Video[]
  videoViews videoViews[]
  AlbumViews AlbumViews[]
  user       followers[]  @relation("user")
  followers  followers[]  @relation("follower")
  Playlist   Playlist[]
  ArtistUser ArtistUser[]

  @@index([id])
  @@fulltext([name])
  @@fulltext([name, lastname])
  @@map("users")
}

model MusicGenre {
  id          String   @id @default(uuid())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Artist      Artist[]

  @@map("music_genre")
}

model Artist {
  id           String       @id @default(uuid())
  name         String
  realName     String
  biography    String?      @db.Text
  image        String?
  musicGenre   MusicGenre   @relation(fields: [musicGenreId], references: [id])
  musicGenreId String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  ArtistUser   ArtistUser[]

  @@map("artists")
}

model ArtistUser {
  id         String   @id @default(uuid())
  role       Role
  artist     Artist   @relation(fields: [artistId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  artistId   String
  userId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([artistId, userId]) // ensures uniqueness of the pair
  @@map("artist_users")
}

model Profile {
  id          String   @id @default(uuid())
  image       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("profile")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Album      Album[]

  @@map("category")
}

model Album {
  id          String       @id @default(uuid())
  cover       String
  title       String
  description String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Music       Music[]
  AlbumViews  AlbumViews[]

  @@map("album")
}

model Music {
  id            String          @id @default(uuid())
  title         String
  duration      String
  audio         String
  album         Album           @relation(fields: [albumId], references: [id])
  albumId       String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  PlaylistMusic PlaylistMusic[]

  @@map("music")
}

model VideoCategory {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Video      Video[]

  @@map("video_category")
}

model Video {
  id          String        @id @default(uuid())
  title       String
  description String
  video       String
  cover       String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  category    VideoCategory @relation(fields: [categoryId], references: [id])
  hls         String?
  categoryId  String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  videoViews  videoViews[]

  @@map("video")
}

model AlbumViews {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  album      Album    @relation(fields: [albumId], references: [id])
  albumId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("album_views")
}

model followers {
  id         String   @id @default(uuid())
  user       User     @relation("user", fields: [userId], references: [id])
  userId     String
  follower   User?    @relation("follower", fields: [followerId], references: [id])
  followerId String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("followers")
}

model Playlist {
  id            String          @id @default(uuid())
  name          String
  userId        String
  User          User            @relation(fields: [userId], references: [id])
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  PlaylistMusic PlaylistMusic[]

  @@map("playlists")
}

model PlaylistMusic {
  id         String   @id @default(uuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  musicId    String
  Music      Music    @relation(fields: [musicId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("playlist_music")
}

model videoViews {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("video_views")
}
