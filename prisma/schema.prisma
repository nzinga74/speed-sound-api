// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  lastname   String
  email      String       @unique
  password   String
  sex        String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  Profile    Profile[]
  Album      Album[]
  Video      Video[]
  videoViews videoViews[]
  AlbumViews AlbumViews[]
  user       followers[]  @relation("user")
  followers  followers[]  @relation("follower")

  @@map("users")
}

model Profile {
  id          String   @id @default(uuid())
  image       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("profile")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Album      Album[]

  @@map("category")
}

model Album {
  id          String       @id @default(uuid())
  cover       String
  title       String
  description String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Music       Music[]
  AlbumViews  AlbumViews[]

  @@map("album")
}

model Music {
  id         String   @id @default(uuid())
  title      String
  duration   String
  audio      String
  album      Album    @relation(fields: [albumId], references: [id])
  albumId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("music")
}

model VideoCategory {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Video      Video[]

  @@map("video_category")
}

model Video {
  id          String        @id @default(uuid())
  title       String
  description String
  video       String
  cover       String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  category    VideoCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  videoViews  videoViews[]

  @@map("video")
}

model AlbumViews {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  album      Album    @relation(fields: [albumId], references: [id])
  albumId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("album_views")
}

model followers {
  id         String   @id @default(uuid())
  user       User     @relation("user", fields: [userId], references: [id])
  userId     String
  follower   User?    @relation("follower", fields: [followerId], references: [id])
  followerId String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("followers")
}

model videoViews {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("video_views")
}
